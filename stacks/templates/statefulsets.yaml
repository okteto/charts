{{- range $name, $service := .Values.services }}
{{ if $service.volumes }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ $name }}"
  labels:
    stack.okteto.com/name: "{{ $.Release.Name }}"
    stack.okteto.com/service: "{{ $name }}"
    app.kubernetes.io/name: "{{ $name }}"
    app.kubernetes.io/component: "{{ $name }}"
    {{- include "stack.labels" $ | nindent 4 }}
spec:
  serviceName: "{{ $name }}"
  replicas: {{ $service.replicas }}
  selector:
    matchLabels:
      stack.okteto.com/name: "{{ $.Release.Name }}"
      stack.okteto.com/service: "{{ $name }}"
  template:
    metadata:
      labels:
        stack.okteto.com/name: "{{ $.Release.Name }}"
        stack.okteto.com/service: "{{ $name }}"
    spec:
      {{ if $service.stop_grace_period }}
      terminationGracePeriodSeconds: {{ $service.stop_grace_period }}
      {{ end }}
      containers:
        - name: "{{ $name }}"
          image: "{{ $service.image }}"
          {{ if $service.command }}
          command:
          {{ if eq (typeOf $service.command) "string" }}
            - sh
            - -c
            - {{ $service.command }}
          {{ else }}
            {{- range $command := $service.command }}
            - {{ $command }}
            {{ end }}
          {{ end }}
          {{ end }}
          {{ if $service.args }}
          args:
            {{- range $arg := $service.args }}
            - {{ $arg }}
            {{ end }}
          {{ end }}
          {{ if $service.ports }}
          ports:
            {{- range $port := $service.ports }}
            - containerPort: {{ $port }}
            {{ end }}
          {{ end }}
          {{ if $service.environment }}
          env:
            {{- range $env := $service.environment }}
            - name: {{ (splitn "=" 2 $env)._0 }}
              value: {{ (splitn "=" 2 $env)._1 }}
            {{ end }}
          {{ end }}
          {{ if and $service.healthchecks $service.ports }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ mustFirst $service.ports }}
            initialDelaySeconds: 30
            periodSeconds: 30
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health
              port: {{ mustFirst $service.ports }}
            initialDelaySeconds: 30
            periodSeconds: 30
            failureThreshold: 3
          {{ end }}
          {{ if $service.resources }}
          resources:
            requests:
              {{ if $service.resources.cpu }}
              cpu: {{ $service.resources.cpu }}
              {{ end }}
              {{ if $service.resources.memory }}
              memory: {{ $service.resources.memory }}
              {{ end }}
            limits:
              {{ if $service.resources.cpu }}
              cpu: {{ $service.resources.cpu }}
              {{ end }}
              {{ if $service.resources.memory }}
              memory: {{ $service.resources.memory }}
              {{ end }}
          {{ end }}
          volumeMounts:
            {{- range $index, $volume := $service.volumes }}
            - name: "pvc-{{ $index }}"
              subPath: "data"
              mountPath: {{ $volume }}
            {{ end }}
  volumeClaimTemplates:
    {{- range $index, $volume := $service.volumes }}
    - metadata:
        name: "pvc-{{ $index }}"
        labels:
          stack.okteto.com/name: "{{ $.Release.Name }}"
          stack.okteto.com/service: "{{ $name }}"
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            {{ if and ($service.resources) ($service.resources.disk) }}
            storage: {{ $service.resources.disk }}
            {{ else }}
            storage: 10Gi
            {{ end }}
    {{ end }}
---
{{- end }}
{{- end }}